@SmashedTransistors wrote: 
> Maybe it is a good idea to start a new thread about "tips and good practices for I2C objects".

Ok. I'll bite.
Here's my take on writing I2C drivers for Axoloti.
BTW- I'm broadly ignorant about many things, so feel free to comment/contribute.

I2C is a shared bus technology.
[https://en.wikipedia.org/wiki/I%C2%B2C](https://en.wikipedia.org/wiki/I%C2%B2C)

Lot's of interesting chips have an I2C interface and the Axoloti provides an I2C bus on it's IO pins.
If you have an I2C device you want to hook up, you may need to write an I2C driver/object to control it.

I2C is a *shared* bus.

The Axoloti is the bus master.
Each device is a bus slave.
There can be multiple slaves (each with a unique 7-bit I2C address).
The Axoloti initiates the bus transaction (read/write) and the slave devices respond (hopefully).
Each device is controlled by it's own driver.
The device drivers are written by different people, so here are some best practices to ensure drivers play well together on the same I2C bus.

1) Provide a way for the user to specify a unique device address.

When the master (Axoloti) starts a transation on the bus, it indicates which device it wants to talk to by using a 7-bit I2C address.
The master talks to one device at a time, so each device needs a unique I2C address.
The device datasheet will tell you which addresses a specific device can use.
The device will often have some hardware pins that specify some bits of the address.
This allows the user to have multiple instances of the same device on the bus, each with a unique address.
The driver writer needs to provide a way to specify which device address a driver should be using.

The device address needs to be specified at compile time.
On Axoloti this can be handled by an attribute in the object:

      <attribs>
         <combo name="adr">
            <MenuEntries>
               <string>0x1d</string>
               <string>0x53</string>
            </MenuEntries>
            <CEntries>
               <string>0x1d</string>
               <string>0x53</string>
            </CEntries>
         </combo>
      </attribs>

2) Initialise the I2C bus only once.

The I2C bus needs to be initialised in the patch.
A given patch might control multiple I2C devices, but the I2C bus should only be initialised once.
The bus is initialised by a call to the i2cStart() function.
This should *not* be called within the driver because with multiple devices you would get multiple calls to initialise the bus.
It should be called through a single instance of the i2c config object.

axoloti-factory/objects/gpio/i2c/config.axo

This object does not connect to anything, it just handles the IO setup and shutdown for the I2C bus.


3) Device IO operations should be in their own thread.

Axoloti uses ChibiOS which is a multi-threaded RTOS.
The DSP thread calls the krate/srate functions of the patch and computes the audio.
The DSP thread needs to run as quickly as possible so it can feed the codec.
So: The DSP thread should not be waiting around for external IO to take place.
So: The I2C bus operations should be run in their own thread where they can run asynchronously without slowing down the DSP thread.

Example:

  // create the polling thread
  s->thd = chThdCreateStatic(s->thd_wa, sizeof(s->thd_wa), NORMALPRIO, ttp229_thread, (void *)s);

and the thread needs to be terminated when the patch is finished....

  // stop thread
  chThdTerminate(s->thd);
  chThdWait(s->thd);


4) Lock/Unlock the I2C bus around bus operations.

With the IO operations for each device running in their own thread we have multiple threads each trying to access the I2C bus.
The drivers will access the bus asynchronously, so we have to make sure the access is properly shared.
ChibiOS provides functions to lock/unlock the bus: i2cAcquireBus(), i2cReleaseBus()
A given thread needs to get the lock before it uses the bus and release the lock after it has finished with the bus.

Example:

  i2cAcquireBus(s->dev);
  msg_t rc = i2cMasterReceiveTimeout(s->dev, s->adr, s->rx, 2, TTP229_I2C_TIMEOUT);
  i2cReleaseBus(s->dev);

It's up to the driver writer to minimise lock time and not hog the bus.

5) Lock shared memory access between DSP and IO threads.

In general the device driver IO thread and DSP thread need to communicate. 
Example: The DSP thread will read the results of a key scan generated from the IO thread.
Each thread needs to lock/unlock the shared memory between the threads so the read/write of that memory is consistent.


Examples:






